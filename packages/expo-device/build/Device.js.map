{"version":3,"file":"Device.js","sourceRoot":"","sources":["../src/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import ExpoDevice from './ExpoDevice';\n\nimport {\n  devicesWithNotch,\n  deviceNamesByCode,\n} from './Device.types';\n\nexport { default as ExpoDeviceInfoView } from './ExpoDeviceView';\n\nimport { Platform } from '@unimodules/core';\n\nexport const brand = ExpoDevice.brand;\nexport const carrier = ExpoDevice.carrier;\nexport const manufacturer = ExpoDevice.manufacturer;\nif (Platform.OS === 'ios') {\n  var modelName;\n  let deviceName;\n  let deviceId = ExpoDevice.deviceId;\n  if (deviceId) {\n    deviceName = deviceNamesByCode[deviceId];\n    if (!deviceName) {\n      // Not found on database. At least guess main device type from string contents:\n      if (deviceId.startsWith('iPod')) {\n        deviceName = 'iPod Touch';\n      } else if (deviceId.startsWith('iPad')) {\n        deviceName = 'iPad';\n      } else if (deviceId.startsWith('iPhone')) {\n        deviceName = 'iPhone';\n      } else if (deviceId.startsWith('AppleTV')) {\n        deviceName = 'Apple TV';\n      }\n    }\n  }\n  modelName = deviceName;\n} else {\n  modelName = ExpoDevice.model\n}\nexport const model = modelName;\nexport const phoneNumber = ExpoDevice.phoneNumber;\nexport const serialNumber = ExpoDevice.serialNumber;\nexport const systemName = ExpoDevice.systemName;\nexport const totalMemory = ExpoDevice.totalMemory;\nexport const uniqueId = ExpoDevice.uniqueId;\nexport const isTablet = ExpoDevice.isTablet;\nexport const deviceType = ExpoDevice.deviceType;\nexport const deviceId = ExpoDevice.deviceId;\nexport const totalDiskCapacity = ExpoDevice.totalDiskCapacity;\nexport const supportedABIs = ExpoDevice.supportedABIs;\nexport function hasNotch(): boolean {\n  return (\n    devicesWithNotch.findIndex(\n      item =>\n        item.brand.toLowerCase() === ExpoDevice.brand.toLowerCase() &&\n        item.model.toLowerCase() === ((Platform.OS === 'ios') ? modelName.toLowerCase() : ExpoDevice.model.toLowerCase())\n    ) !== -1\n  );\n}\nexport async function getFreeDiskStorageAsync(): Promise<String> {\n  return await ExpoDevice.getFreeDiskStorageAsync();\n}\n\nexport async function getIPAddressAsync(): Promise<string> {\n  return await ExpoDevice.getIPAddressAsync();\n}\n\nexport async function getMACAddressAsync(): Promise<string> {\n  return await ExpoDevice.getMACAddressAsync();\n}\n\nexport async function isAirplaneModeAsync(): Promise<boolean | string> {\n  if (Platform.OS === 'android') {\n    return await ExpoDevice.isAirplaneModeAsync();\n  } else {\n    return Promise.reject('This platform does not support this method');\n  }\n}\n\nexport async function hasSystemFeatureAsync(feature: string): Promise<boolean | string> {\n  if (Platform.OS === 'android') {\n    return await ExpoDevice.hasSystemFeatureAsync(feature);\n  } else {\n    return Promise.reject('This platform does not support this method');\n  }\n}\n\nexport async function isPinOrFingerprintSetAsync(): Promise<boolean>{\n  return await ExpoDevice.isPinOrFingerprintSetAsync();\n}\n\nexport async function getUserAgentAsync(): Promise<String>{\n  return await ExpoDevice.getUserAgentAsync();\n}"]}