{"version":3,"file":"InAppPurchases.js","sourceRoot":"","sources":["../src/InAppPurchases.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { CodedError } from '@unimodules/core';\nimport ExpoInAppPurchases from './ExpoInAppPurchases';\nimport { QueryResponse, ResponseCode, ErrorCode } from './InAppPurchases.types';\n\nexport {\n  ResponseCode,\n  ErrorCode,\n}\n\nconst errors = {\n  ALREADY_CONNECTED: 'Already connected to App Store',\n  ALREADY_DISCONNECTED: 'Already disconnected from App Store',\n  NOT_CONNECTED: 'Must be connected to App Store',\n};\n\nlet connected = false;\n\nexport async function connectAsync(): Promise<QueryResponse> {\n  if (connected) {\n    throw new ConnectionError(errors.ALREADY_CONNECTED);\n  }\n\n  const result = await ExpoInAppPurchases.connectAsync();\n  connected = true;\n  return result;\n}\n\nexport async function getProductsAsync(itemList: string[]): Promise<QueryResponse> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  return await ExpoInAppPurchases.getProductsAsync(itemList);\n}\n\nexport async function getPurchaseHistoryAsync(refresh?: boolean): Promise<QueryResponse> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  return await ExpoInAppPurchases.getPurchaseHistoryAsync(refresh);\n}\n\nexport async function purchaseItemAsync(itemId: string, oldItem?: string): Promise<QueryResponse> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  // Replacing old item is only supported on Android\n  const args = Platform.OS === 'android' ? [itemId, oldItem] : [itemId];\n  return await ExpoInAppPurchases.purchaseItemAsync(...args);\n}\n\nexport async function acknowledgePurchaseAsync(purchaseToken: string, consumeItem: boolean): Promise<void> {\n  // No-op if not on Android since this is not applicable\n  if (!ExpoInAppPurchases.acknowledgePurchaseAsync) return;\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  if (consumeItem) {\n    return await ExpoInAppPurchases.consumeAsync(purchaseToken);\n  }\n  return await ExpoInAppPurchases.acknowledgePurchaseAsync(purchaseToken);\n}\n\nexport async function getBillingResponseCodeAsync(): Promise<number> {\n  if (!connected) {\n    return ResponseCode.ERROR;\n  }\n  if (!ExpoInAppPurchases.getBillingResponseCodeAsync) {\n    return ResponseCode.OK;\n  }\n\n  return await ExpoInAppPurchases.getBillingResponseCodeAsync();\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  if (!connected) {\n    throw new ConnectionError(errors.ALREADY_DISCONNECTED);\n  }\n  await ExpoInAppPurchases.disconnectAsync();\n  connected = false;\n}\n\nclass ConnectionError extends CodedError {\n  constructor(message: string) {\n    super('ERR_IN_APP_PURCHASES_CONNECTION', message);\n  }\n}"]}